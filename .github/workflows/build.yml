name: Build and Release
on:
  push:
    branches: ['main']
    tags:
      - 'v*'
  pull_request:
    branches: ['main']
  workflow_dispatch:

jobs:
  setup_release:
    name: Setup release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      mod_name: ${{ steps.get_mod_name.outputs.mod_name }}
      mod_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get C# project file
        id: get_project_file
        run: echo "csproj=$(find . -iname *.csproj | head -1)" >> $GITHUB_OUTPUT

      - name: Get mod name
        id: get_mod_name
        run: |
          tag=AssemblyName
          mod_name=$(grep --only-matching --perl-regexp "<$tag>\K.*(?=</$tag>)" ${{ steps.get_project_file.outputs.csproj }})
          echo "mod_name=$mod_name" >> $GITHUB_OUTPUT

      - name: Get assembly version
        id: get_version
        run: |
          tag=Version
          version=$(grep --only-matching --perl-regexp "<$tag>\K.*(?=</$tag>)" ${{ steps.get_project_file.outputs.csproj }})
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Get recent change log
        id: get_changelog
        run: |
          query_regex="^## \[[0-9]*\.[0-9]*\.[0-9]*\] - [0-9]{4}-[0-9]{2}-[0-9]{2}$"
          cmd_output=$(grep --only-matching --perl-regexp "$query_regex" thunderstore/CHANGELOG.md)
          echo "$(echo "$cmd_output" | head -2)" > temp.txt
          start=$(cat temp.txt | head -1 | sed --expression 's/[]\/$*.^[]/\\&/g')
          end=$(cat temp.txt | tail -1 | sed --expression 's/[]\/$*.^[]/\\&/g')
          body=$(awk "/$start/,/$end/ { print }" thunderstore/ChangeLog.md | head -n -1)
          echo 'body<<EOF' >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.get_changelog.outputs.body }}
          draft: false
          prerelease: false
  build_and_publish:
    name: 'Build and Publish (${{ matrix.target.title }})'
    needs: setup_release
    permissions:
      contents: write
    strategy:
      matrix:
        target:
          [
            { runner: macos-latest, param: osx, title: macOS },
            { runner: windows-latest, param: windows, title: Windows },
          ]
    runs-on: ${{ matrix.target.runner }}
    steps:
      - uses: actions/checkout@v4
      - name: Download libs-stripped
        uses: actions/checkout@v4
        with:
          repository: nine-sols-modding/libs-stripped
          path: libs-stripped
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9
      - name: Restore dependencies
        run: dotnet restore
      - name: Check against all game versions
        shell: bash
        run: build.sh ${{ matrix.target.param }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 'Build $${{ matrix.target.title }}'
          path: '*.zip'
      - name: Get publish zip
        id: get_zip
        shell: bash
        run: |
          echo "file_path=$(find . -iname *.zip | head -1)" >> $GITHUB_OUTPUT
      - name: Upload zip release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup_release.outputs.upload_url }}
          asset_path: ${{ steps.get_zip.outputs.file_path }}
          asset_name: ${{ needs.setup_release.outputs.mod_name }}_${{ needs.setup_release.outputs.mod_version }}_${{ matrix.target.title }}.zip
          asset_content_type: application/zip
  publish_modpack:
    name: Publish Mod Pack
    needs: setup_release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create mod pack folder
        run: |
          csproj=$(find . -iname *.csproj | head -1)
          tag=AssemblyName
          modName=$(grep --only-matching --perl-regexp "<$tag>\K.*(?=</$tag>)" $csproj)
          tag=Version
          versionNumber=$(grep --only-matching --perl-regexp "<$tag>\K.*(?=</$tag>)" $csproj)
          versionKey="version_number"
          versionEntry="\"$versionKey\": \"[0-9]+\.[0-9]+\.[0-9]+\""
          cd thunderstore
          mkdir -p modpack
          cp * modpack
          cd modpack
          ls -lart
          sed --in-place -E "s/$versionEntry/\"$versionKey\": \"$versionNumber\"/" manifest.json
          deps_start="\"dependencies\": \["
          deps_end="\]"
          currentLines=$(awk "/$deps_start/,/$deps_end/ { print }" manifest.json | sed '1d;$d')
          newLines="\t\t\"JngoCreates-${modName}-Windows-$versionNumber\",\n\t\t\"JngoCreates-${modName}-macOS-$versionNumber\""
          sed --in-place --expression "s/$currentLines/$newLines/" manifest.json
      - name: Zip mod pack
        run: |
          cd thunderstore/modpack && zip -r ../../ModPack.zip .
      - name: Upload zip release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup_release.outputs.upload_url }}
          asset_path: ModPack.zip
          asset_name: ${{ needs.setup_release.outputs.mod_name }}_${{ needs.setup_release.outputs.mod_version }}_ModPack.zip
          asset_content_type: application/zip
