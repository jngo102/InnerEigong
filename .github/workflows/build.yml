name: Build and Release
on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  setup_release:
    name: Setup release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      mod_name: ${{ steps.get_mod_name.outputs.mod_name }}
      mod_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get C# project file
        id: get_project_file
        run: echo "csproj=$(find . -iname *.csproj | head -1)" >> $GITHUB_OUTPUT

      - name: Get mod name
        id: get_mod_name
        run: |
          tag=AssemblyName
          mod_name=$(grep --only-matching --perl-regexp "<$tag>\K.*(?=</$tag>)" ${{ steps.get_project_file.outputs.csproj }})
          echo "mod_name=$mod_name" >> $GITHUB_OUTPUT 

      - name: Get assembly version
        id: get_version
        run: |
          tag=Version
          version=$(grep --only-matching --perl-regexp "<$tag>\K.*(?=</$tag>)" ${{ steps.get_project_file.outputs.csproj }})
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Get recent Change Log
        id: get_changelog
        run: |
          query_regex="^## \[[0-9]*\.[0-9]*\.[0-9]*\] - [0-9]{4}-[0-9]{2}-[0-9]{2}$"
          cmd_output=$(grep --only-matching --perl-regexp "$query_regex" ChangeLog.md)
          echo "$(echo "$cmd_output" | head -2)" > temp.txt
          start=$(cat temp.txt | head -1 | sed --expression 's/[]\/$*.^[]/\\&/g')
          end=$(cat temp.txt | tail -1 | sed --expression 's/[]\/$*.^[]/\\&/g')
          body=$(awk "/$start/,/$end/ { print }" ChangeLog.md | head -n -1)
          echo 'body<<EOF' >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.get_changelog.outputs.body }}
          draft: false
          prerelease: false
  build_and_publish_macos:
    name: Build and Publish (macOS)
    needs: setup_release
    permissions:
      contents: write
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download libs-stripped
        uses: actions/checkout@v4
        with:
          repository: nine-sols-modding/libs-stripped
          path: libs-stripped
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9
      - name: Install tcli
        run: dotnet tool install -g tcli
      - name: Restore dependencies
        run: dotnet restore
      - name: Check against all game versions
        run: |
          cut -f1 -d' ' libs-stripped/versions.txt | while IFS= read -r version; do
            echo "Checking $version"
            dotnet build --no-restore -p:DllPath="$PWD/libs-stripped/$version"
          done
      - name: Publish build
        run: |
          publish_version=$(cut -f1 -d' ' libs-stripped/versions.txt | tail -n1)
          dotnet publish --no-restore -p:DllPath="$PWD/libs-stripped/$publish_version"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build_macos
          path: |
            thunderstore/build/*.zip
            thunderstore/build/dll/*.dll
      - name: Get publish zip
        id: get_zip
        run: |
          echo "file_path=$(find . -iname *.zip | head -1)" >> $GITHUB_OUTPUT
      - name: Upload zip release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup_release.outputs.upload_url }}
          asset_path: ${{ steps.get_zip.outputs.file_path }}
          asset_name: ${{ needs.setup_release.outputs.mod_name }}_${{ needs.setup_release.outputs.mod_version }}_macOS.zip
          asset_content_type: application/zip
      - name: Get publish DLL
        id: get_dll
        run: |
          echo "file_path=$(find ./thunderstore/build/dll/*.dll -iname *.dll | head -1)" >> $GITHUB_OUTPUT
      - name: Upload DLL release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup_release.outputs.upload_url }}
          asset_path: ${{ steps.get_dll.outputs.file_path }}
          asset_name: ${{ needs.setup_release.outputs.mod_name }}_${{ needs.setup_release.outputs.mod_version }}_macOS.dll
          asset_content_type: application/x-msdownload
  build_and_publish_windows:
    name: Build and Publish (Windows)
    needs: setup_release
    permissions:
      contents: write
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download libs-stripped
        uses: actions/checkout@v4
        with:
          repository: nine-sols-modding/libs-stripped
          path: libs-stripped
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9
      - name: Install tcli
        run: dotnet tool install -g tcli
      - name: Restore dependencies
        run: dotnet restore
      - name: Check against all game versions
        run: |
          Get-Content "libs-stripped\versions.txt" | ForEach-Object {
              $version = $_.Split(' ')[0]
              Write-Host "Checking $version"
              dotnet build --no-restore -p:DllPath="$PWD\libs-stripped\$version"
          }
      - name: Publish build
        run: |
          $publish_version = (Get-Content "libs-stripped/versions.txt" | Select-Object -Last 1).Split()[0]
          dotnet publish --no-restore -p:DllPath="$PWD/libs-stripped/$publish_version"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build_windows
          path: |
            thunderstore/build/*.zip
            thunderstore/build/dll/*.dll
      - name: Get publish zip
        id: get_zip
        run: |
          $zipFile = Get-ChildItem -Path "./thunderstore/build/*.zip" -Include "*.zip" | Select-Object -First 1
           echo "file_path=$($$zipFile.FullName)" >> $GITHUB_OUTPUT
      - name: Upload zip release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup_release.outputs.upload_url }}
          asset_path: ${{ steps.get_zip.outputs.file_path }}
          asset_name: ${{ needs.setup_release.outputs.mod_name }}_${{ needs.setup_release.outputs.mod_version }}_Windows.zip
          asset_content_type: application/zip
      - name: Get publish DLL
        id: get_dll
        run: |
          $dllFile = Get-ChildItem -Path "./thunderstore/build/dll/*.dll" -Include "*.dll" | Select-Object -First 1
           echo "file_path=$($dllFile.FullName)" >> $GITHUB_OUTPUT
      - name: Upload DLL release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup_release.outputs.upload_url }}
          asset_path: ${{ steps.get_dll.outputs.file_path }}
          asset_name: ${{ needs.setup_release.outputs.mod_name }}_${{ needs.setup_release.outputs.mod_version }}_Windows.dll
          asset_content_type: application/x-msdownload